"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[32],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return h}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(r),h=o,f=d["".concat(i,".").concat(h)]||d[h]||p[h]||l;return r?n.createElement(f,a(a({ref:t},u),{},{components:r})):n.createElement(f,a({ref:t},u))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,a=new Array(l);a[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<l;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6828:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var n=r(7462),o=r(3366),l=(r(7294),r(3905)),a=["components"],s={},i="Deloser",c={unversionedId:"deloser",id:"deloser",title:"Deloser",description:"About",source:"@site/docs/deloser.md",sourceDirName:".",slug:"/deloser",permalink:"/docs/deloser",tags:[],version:"current",frontMatter:{}},u=[{value:"About",id:"about",children:[],level:2},{value:"Setup",id:"setup",children:[],level:2},{value:"Properties",id:"properties",children:[{value:"restoreFocusOrder?: <em>RestoreFocusOrder</em>",id:"restorefocusorder-restorefocusorder",children:[],level:3},{value:"noSelectorCheck?: <em>boolean</em>",id:"noselectorcheck-boolean",children:[],level:3}],level:2},{value:"Examples",id:"examples",children:[],level:2}],p={toc:u};function d(e){var t=e.components,r=(0,o.Z)(e,a);return(0,l.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"deloser"},"Deloser"),(0,l.kt)("h2",{id:"about"},"About"),(0,l.kt)("p",null,"Ideally when we use keyboard to navigate, the application should always have a focused element.\nIn the real world, we have scenarios like modal dialogs \u2014 when we close a modal dialog, the focus\ngoes nowhere (we call it ",(0,l.kt)("em",{parentName:"p"},"\xabfocus goes to the <body",">","\xbb"),"). The lost focus is especially confusing\nfor the screen reader users."),(0,l.kt)("p",null,"Things are getting even worse because we tend to build our applications from the independent\ncomponents which might be not aware of each other. The modal dialog shouldn't know which button\nneeds to be focused once it closes."),(0,l.kt)("p",null,"Deloser tracks focus history and restores focus to the most recent element from the history\nwhich is still available in case the focus gets lost. From the modal dialog example perspective it\nwould likely be a button which opened it."),(0,l.kt)("p",null,"Delosers can be nested. When we apply the Deloser to the DOM element, it keeps the recent focus\nhistory for that container, when a nested Deloser is present, its history is tracked as a single\nhistory record from the parent Deloser point. Together with the main application Deloser (which\nlikely should be on the root element of the application), it makes sense to add Delosers to the\nlist containers so that the history inside the lists is tracked separately and doen't pollute the\nmain Deloser history."),(0,l.kt)("h2",{id:"setup"},"Setup"),(0,l.kt)("p",null,"To get Deloser working, we need to call ",(0,l.kt)("inlineCode",{parentName:"p"},"getDeloser()")," function:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'import { createTabster, getDeloser } from "tabster";\n\nlet tabsterCore = createTabster(window);\n\ngetDeloser(tabsterCore);\n')),(0,l.kt)("p",null,"Then we can apply ",(0,l.kt)("inlineCode",{parentName:"p"},"data-tabster")," attribute:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},"<div data-tabster='{\"deloser\": {...}}'></div>\n")),(0,l.kt)("h2",{id:"properties"},"Properties"),(0,l.kt)("h3",{id:"restorefocusorder-restorefocusorder"},"restoreFocusOrder?: ",(0,l.kt)("em",{parentName:"h3"},"RestoreFocusOrder")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"History | DeloserDefault | RootDefault | DeloserFirst | RootFirst")),(0,l.kt)("p",null,"We can vary how Deloser finds the element to focus once the focus is lost."),(0,l.kt)("p",null,"With ",(0,l.kt)("inlineCode",{parentName:"p"},"History"),", Deloser will look through the history of previosly focused elements."),(0,l.kt)("p",null,"With ",(0,l.kt)("inlineCode",{parentName:"p"},"DeloserDefault"),", the focus will be restored to an element marked as default focusable."),(0,l.kt)("p",null,"With ",(0,l.kt)("inlineCode",{parentName:"p"},"RootDefault"),", the focus will go to the element marked as default focusable, but the\nwhole application is the target for finding that default element, not just the Deloser container."),(0,l.kt)("p",null,"With ",(0,l.kt)("inlineCode",{parentName:"p"},"DeloserFirst"),", Deloser will focus first focusable element in the Deloser container."),(0,l.kt)("p",null,"With ",(0,l.kt)("inlineCode",{parentName:"p"},"RootFirst"),", Deloser will focus first focusable element in the application."),(0,l.kt)("h3",{id:"noselectorcheck-boolean"},"noSelectorCheck?: ",(0,l.kt)("em",{parentName:"h3"},"boolean")),(0,l.kt)("p",null,"Deloser keeps weak references to the DOM nodes but it also keeps the exact selectors to the\nelements. In a virtual DOM frameworks like React, a part of the page might\nbe rerendered, stay visually the same, but the DOM element in the history will be obsolete."),(0,l.kt)("p",null,"By default, locating the available element in the history, Tabster will try also locating it\nby selector if the element instance is not available."),(0,l.kt)("p",null,"With ",(0,l.kt)("inlineCode",{parentName:"p"},"noSelectorCheck")," we can disable checking the selectors."),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("p",null,"Here be dragons."))}d.isMDXComponent=!0}}]);