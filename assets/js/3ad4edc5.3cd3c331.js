"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[179],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return p}});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(n),p=l,b=m["".concat(i,".").concat(p)]||m[p]||d[p]||o;return n?r.createElement(b,a(a({ref:t},c),{},{components:n})):r.createElement(b,a({ref:t},c))}));function p(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:l,a[1]=s;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},104:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return u},toc:function(){return c},default:function(){return m}});var r=n(7462),l=n(3366),o=(n(7294),n(3905)),a=["components"],s={},i="Observed Element",u={unversionedId:"observed",id:"observed",title:"Observed Element",description:"About",source:"@site/docs/observed.md",sourceDirName:".",slug:"/observed",permalink:"/docs/observed",tags:[],version:"current",frontMatter:{}},c=[{value:"About",id:"about",children:[],level:2},{value:"Setup",id:"setup",children:[],level:2},{value:"Methods",id:"methods",children:[{value:"getElement()",id:"getelement",children:[],level:3},{value:"waitElement()",id:"waitelement",children:[],level:3},{value:"requestFocus()",id:"requestfocus",children:[],level:3}],level:2},{value:"Examples",id:"examples",children:[],level:2}],d={toc:c};function m(e){var t=e.components,n=(0,l.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"observed-element"},"Observed Element"),(0,o.kt)("h2",{id:"about"},"About"),(0,o.kt)("p",null,"Observed Element allows finding and focusing elements which are not yet in the DOM."),(0,o.kt)("p",null,"All we do is mark an element as observed by giving it a name."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<button data-tabster=\'{"observed": {"name": "observedButton"}}\'>\n    Observed\n</button>\n')),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("p",null,"To get Observed Element working, we need to call ",(0,o.kt)("inlineCode",{parentName:"p"},"getObservedElement()")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { createTabster, getObservedElement } from "tabster";\n\nlet tabsterCore = createTabster(window);\n\nlet observedElement = getObservedElement(tabsterCore);\n\nobservedElement.requestFocus("observedButton", 100500);\n')),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("h3",{id:"getelement"},"getElement()"),(0,o.kt)("p",null,"Returns observed element by the name if it's present in the application."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { createTabster, getObservedElement } from "tabster";\n\nlet tabsterCore = createTabster(window);\n\nlet observedElement = getObservedElement(tabsterCore);\n\nlet element = observedElement.getElement("observedButton");\n')),(0,o.kt)("h3",{id:"waitelement"},"waitElement()"),(0,o.kt)("p",null,"Waits for an element for the specified time, returns an element if it appears."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { createTabster, getObservedElement, Types } from "tabster";\n\nlet tabsterCore = createTabster(window);\n\nlet observedElement = getObservedElement(tabsterCore);\n\nlet wait = observed.waitElement(\n    "observedButton", // Name set using Tabster attribute.\n    100500, // Timeout.\n    Types.ObservedElementAccesibilities.Focusable // Only return when the\n    // element becomes focusable.\n);\n\n// The result promise will be resolved once the element is mounted.\nwait.result.then((value) => {\n    console.log("Observed element:", value);\n});\n\n// We can also cancel the wait request.\nwait.cancel();\n')),(0,o.kt)("h3",{id:"requestfocus"},"requestFocus()"),(0,o.kt)("p",null,"Waits for the observed element to appear in the DOM and focuses it."),(0,o.kt)("p",null,"A consecutive ",(0,o.kt)("inlineCode",{parentName:"p"},"requestFocus()")," call or a manual focus movement inside the application\nwill cancel the focus request automatically."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { createTabster, getObservedElement, Types } from "tabster";\n\nlet tabsterCore = createTabster(window);\n\nlet observedElement = getObservedElement(tabsterCore);\n\nlet focus = observed.requestFocus("observedButton", 100500);\n\n// The result promise will be resolved once the element is focused (or timed out).\nfocus.result.then((value: boolean) => {\n    console.log("Observed element is focused:", value);\n});\n\n// We can also cancel the focus request.\nfocus.cancel();\n')),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("p",null,"Here be dragons."))}m.isMDXComponent=!0}}]);